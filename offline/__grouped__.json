{
  "groups": {
    "Template strings": {
      "items": [
        {
          "name": "basics",
          "description": "A template string, is wrapped in backticks.",
          "path": "template-strings/basics",
          "level": "BEGINNER",
          "requiresKnowledgeFrom": [],
          "groupName": "Template strings",
          "id": "1"
        },
        {
          "name": "multiline",
          "description": "Template strings, can be multiline.",
          "path": "template-strings/multiline",
          "level": "BEGINNER",
          "requiresKnowledgeFrom": [
            1
          ],
          "groupName": "Template strings",
          "id": "2"
        },
        {
          "name": "tagged",
          "description": "Tagged template strings are preceeded by an expression.",
          "path": "template-strings/tagged",
          "level": "INTERMEDIATE",
          "requiresKnowledgeFrom": [
            1
          ],
          "groupName": "Template strings",
          "id": "3"
        },
        {
          "name": "`raw` property",
          "description": "The `raw` property accesses the string as it was entered.",
          "path": "template-strings/raw",
          "level": "INTERMEDIATE",
          "requiresKnowledgeFrom": [
            1,
            3
          ],
          "groupName": "Template strings",
          "id": "4"
        }
      ]
    },
    "Arrow functions": {
      "items": [
        {
          "name": "basics",
          "description": "Arrow functions are a more convinient and shorter way to write a function.",
          "path": "arrow-functions/basics",
          "level": "BEGINNER",
          "requiresKnowledgeFrom": [],
          "groupName": "Arrow functions",
          "id": "5"
        },
        {
          "name": "function binding",
          "description": "Arrow functions have lexical `this`, no dynamic `this`.",
          "path": "arrow-functions/binding",
          "level": "BEGINNER",
          "requiresKnowledgeFrom": [
            5,
            22
          ],
          "groupName": "Arrow functions",
          "id": "6"
        }
      ]
    },
    "Block scope": {
      "items": [
        {
          "name": "`let` declaration",
          "description": "`let` restricts the scope of the variable to the current block.",
          "path": "block-scoping/let",
          "level": "BEGINNER",
          "requiresKnowledgeFrom": [],
          "groupName": "Block scope",
          "id": "7"
        },
        {
          "name": "`const` declaration",
          "description": "`const` is like `let` plus read-only.",
          "path": "block-scoping/const",
          "level": "BEGINNER",
          "requiresKnowledgeFrom": [
            7
          ],
          "groupName": "Block scope",
          "id": "8"
        }
      ]
    },
    "Object literal": {
      "items": [
        {
          "name": "basics",
          "description": "ES6 has new shorthands for objects.",
          "path": "object-literal/basics",
          "level": "INTERMEDIATE",
          "requiresKnowledgeFrom": [
            5,
            8
          ],
          "groupName": "Object literal",
          "id": "9"
        },
        {
          "name": "computed properties",
          "description": "Object literal properties may be computed values.",
          "path": "object-literal/computed-properties",
          "level": "ADVANCED",
          "requiresKnowledgeFrom": [
            9,
            8
          ],
          "groupName": "Object literal",
          "id": "16"
        }
      ]
    },
    "Destructuring": {
      "items": [
        {
          "name": "array",
          "description": "Destructuring arrays allows for more concise.",
          "path": "destructuring/array",
          "level": "BEGINNER",
          "requiresKnowledgeFrom": [
            7,
            8,
            1
          ],
          "groupName": "Destructuring",
          "id": "10"
        },
        {
          "name": "string",
          "description": "Destructuring can also be done on strings.",
          "path": "destructuring/string",
          "level": "BEGINNER",
          "requiresKnowledgeFrom": [
            8,
            17
          ],
          "groupName": "Destructuring",
          "id": "11"
        },
        {
          "name": "object",
          "description": "Destructuring objects is a core concepts for modules and more.",
          "path": "destructuring/object",
          "level": "BEGINNER",
          "requiresKnowledgeFrom": [
            8,
            9
          ],
          "groupName": "Destructuring",
          "id": "12"
        },
        {
          "name": "defaults",
          "description": "When destructuring you can also use default values.",
          "path": "destructuring/defaults",
          "level": "BEGINNER",
          "requiresKnowledgeFrom": [
            8,
            10,
            12
          ],
          "groupName": "Destructuring",
          "id": "13"
        },
        {
          "name": "parameters",
          "description": "Destructuring function parameters.",
          "path": "destructuring/parameters",
          "level": "INTERMEDIATE",
          "requiresKnowledgeFrom": [
            10,
            12,
            5
          ],
          "groupName": "Destructuring",
          "id": "14"
        },
        {
          "name": "rename",
          "description": "Rename variables while destructuring.",
          "path": "destructuring/rename",
          "level": "INTERMEDIATE",
          "requiresKnowledgeFrom": [
            10,
            12,
            13,
            8,
            5
          ],
          "groupName": "Destructuring",
          "id": "15"
        }
      ]
    },
    "Unicode": {
      "items": [
        {
          "name": "in strings",
          "description": "How to use unicode in strings.",
          "path": "unicode/in-strings",
          "level": "INTERMEDIATE",
          "requiresKnowledgeFrom": [
            8,
            1
          ],
          "groupName": "Unicode",
          "id": "17"
        }
      ]
    },
    "Rest operator": {
      "items": [
        {
          "name": "as parameter",
          "description": "Use the rest operator as parameter.",
          "path": "rest/as-parameter",
          "level": "INTERMEDIATE",
          "requiresKnowledgeFrom": [],
          "groupName": "Rest operator",
          "id": "18"
        },
        {
          "name": "with destructuring",
          "description": "Use the rest operator with destructuring.",
          "path": "rest/with-destructuring",
          "level": "INTERMEDIATE",
          "requiresKnowledgeFrom": [],
          "groupName": "Rest operator",
          "id": "19"
        }
      ]
    },
    "Spread operator": {
      "items": [
        {
          "name": "with arrays",
          "description": "Spread operator in use with arrays.",
          "path": "spread/with-arrays",
          "level": "INTERMEDIATE",
          "requiresKnowledgeFrom": [],
          "groupName": "Spread operator",
          "id": "20"
        },
        {
          "name": "with strings",
          "description": "Apply spread operator on strings.",
          "path": "spread/with-strings",
          "level": "INTERMEDIATE",
          "requiresKnowledgeFrom": [],
          "groupName": "Spread operator",
          "id": "21"
        }
      ]
    },
    "Class": {
      "items": [
        {
          "name": "creation",
          "description": "Create a class.",
          "path": "class/creation",
          "level": "BEGINNER",
          "requiresKnowledgeFrom": [],
          "groupName": "Class",
          "id": "22"
        },
        {
          "name": "accessors",
          "description": "Getter+setters as class properties.",
          "path": "class/accessors",
          "level": "INTERMEDIATE",
          "requiresKnowledgeFrom": [],
          "groupName": "Class",
          "id": "23"
        },
        {
          "name": "static",
          "description": "Use of the static keyword inside a class.",
          "path": "class/static",
          "level": "BEGINNER",
          "requiresKnowledgeFrom": [],
          "groupName": "Class",
          "id": "24"
        },
        {
          "name": "extends",
          "description": "How to do inheritance, using `extends`.",
          "path": "class/extends",
          "level": "BEGINNER",
          "requiresKnowledgeFrom": [],
          "groupName": "Class",
          "id": "25"
        },
        {
          "name": "more extends",
          "description": "More in depth `extends` stuff",
          "path": "class/more-extends",
          "level": "ADVANCED",
          "requiresKnowledgeFrom": [],
          "groupName": "Class",
          "id": "26"
        },
        {
          "name": "super in method",
          "description": "Use of `super` inside a method.",
          "path": "class/super-in-method",
          "level": "INTERMEDIATE",
          "requiresKnowledgeFrom": [],
          "groupName": "Class",
          "id": "27"
        },
        {
          "name": "super in constructor",
          "description": "Use of `super` inside the constructor.",
          "path": "class/super-in-constructor",
          "level": "INTERMEDIATE",
          "requiresKnowledgeFrom": [],
          "groupName": "Class",
          "id": "28"
        }
      ]
    },
    "Array API": {
      "items": [
        {
          "name": "`Array.from()`",
          "description": "Convert a not-array into an array.",
          "path": "array-api/from",
          "level": "TBD",
          "requiresKnowledgeFrom": [],
          "groupName": "Array API",
          "id": "29"
        },
        {
          "name": "`Array.of()`",
          "description": "`Array.of` creates an array with the given arguments as elements.",
          "path": "array-api/of",
          "level": "TBD",
          "requiresKnowledgeFrom": [],
          "groupName": "Array API",
          "id": "30"
        },
        {
          "name": "`[].fill()`",
          "description": "`[].fill` can fill up an array with one value.",
          "path": "array-api/fill",
          "level": "TBD",
          "requiresKnowledgeFrom": [],
          "links": {
            "discussions": [
              {
                "url": "https://github.com/tddbin/es6katas.org/issues/9",
                "comment": "A discussion in a github issue, about how to use this kata."
              }
            ],
            "documentation": [
              {
                "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill",
                "comment": "API doc on MDN."
              }
            ]
          },
          "groupName": "Array API",
          "id": "31"
        },
        {
          "name": "`[].find()`",
          "description": "`[].find` makes finding items in arrays easier.",
          "path": "array-api/find",
          "level": "TBD",
          "requiresKnowledgeFrom": [],
          "groupName": "Array API",
          "id": "32"
        },
        {
          "name": "`[].findIndex()`",
          "description": "`[].findIndex` makes finding items in arrays easier.",
          "path": "array-api/findIndex",
          "level": "TBD",
          "requiresKnowledgeFrom": [],
          "groupName": "Array API",
          "id": "33"
        },
        {
          "name": "`[].entries()`",
          "description": "`[].entries()` returns an iterator object with all entries.",
          "path": "array-api/entries",
          "level": "INTERMEDIATE",
          "requiresKnowledgeFrom": [
            8,
            29,
            39
          ],
          "groupName": "Array API",
          "id": "41"
        },
        {
          "name": "`[].keys()`",
          "description": "`[].keys()` returns an iterator for all keys in the array.",
          "path": "array-api/keys",
          "level": "INTERMEDIATE",
          "requiresKnowledgeFrom": [
            8,
            10,
            29,
            39
          ],
          "groupName": "Array API",
          "id": "42"
        },
        {
          "name": "`[].values()`",
          "description": "`[].values()` returns an iterator for all values in the array",
          "path": "array-api/values",
          "level": "INTERMEDIATE",
          "requiresKnowledgeFrom": [
            8,
            10,
            39
          ],
          "groupName": "Array API",
          "id": "43"
        }
      ]
    },
    "Symbol": {
      "items": [
        {
          "name": "basics",
          "description": "Symbol basics.",
          "path": "symbol/basics",
          "level": "INTERMEDIATE",
          "requiresKnowledgeFrom": [],
          "groupName": "Symbol",
          "id": "34"
        },
        {
          "name": "`Symbol.for()`",
          "description": "`Symbol.for()` for registering Symbols globally.",
          "path": "symbol/for",
          "level": "INTERMEDIATE",
          "requiresKnowledgeFrom": [],
          "groupName": "Symbol",
          "id": "35"
        },
        {
          "name": "`Symbol.keyFor()`",
          "description": "`Symbol.keyFor()` gets the symbol key for a given symbol.",
          "path": "symbol/keyFor",
          "level": "INTERMEDIATE",
          "requiresKnowledgeFrom": [
            35
          ],
          "groupName": "Symbol",
          "id": "36"
        }
      ]
    },
    "Iterator": {
      "items": [
        {
          "name": "array",
          "description": "",
          "path": "iterator/array",
          "level": "TBD",
          "requiresKnowledgeFrom": [],
          "groupName": "Iterator",
          "id": "37"
        },
        {
          "name": "string",
          "description": "",
          "path": "iterator/string",
          "level": "TBD",
          "requiresKnowledgeFrom": [
            34,
            37
          ],
          "groupName": "Iterator",
          "id": "38"
        },
        {
          "name": "protocol",
          "description": "",
          "path": "iterator/protocol",
          "level": "EXPERT",
          "requiresKnowledgeFrom": [],
          "groupName": "Iterator",
          "id": "39"
        },
        {
          "name": "usage",
          "description": "",
          "path": "iterator/usages",
          "level": "EXPERT",
          "requiresKnowledgeFrom": [
            7,
            10,
            12,
            34,
            39,
            20
          ],
          "groupName": "Iterator",
          "id": "40"
        }
      ]
    },
    "Map": {
      "items": [
        {
          "name": "Basics",
          "description": "",
          "path": "map/basics",
          "level": "BEGINNER",
          "requiresKnowledgeFrom": [],
          "groupName": "Map",
          "id": "44"
        },
        {
          "name": "`map.get()`",
          "description": "",
          "path": "map/get",
          "level": "INTERMEDIATE",
          "requiresKnowledgeFrom": [
            37
          ],
          "groupName": "Map",
          "id": "45"
        },
        {
          "name": "`map.set()`",
          "description": "",
          "path": "map/set",
          "level": "EXPERT",
          "requiresKnowledgeFrom": [],
          "groupName": "Map",
          "id": "46"
        },
        {
          "name": "initialize",
          "description": "Initializing a map with values.",
          "path": "map/initialize",
          "level": "ADVANCED",
          "requiresKnowledgeFrom": [
            7,
            8,
            29,
            44,
            46
          ],
          "groupName": "Map",
          "id": "53"
        }
      ]
    },
    "Set": {
      "items": [
        {
          "name": "basics",
          "description": "",
          "path": "set/basics",
          "level": "TBD",
          "requiresKnowledgeFrom": [],
          "groupName": "Set",
          "id": "47"
        },
        {
          "name": "`set.add()`",
          "description": "Appends a new element to the end of a Set object.",
          "path": "set/add",
          "level": "TBD",
          "requiresKnowledgeFrom": [
            47
          ],
          "groupName": "Set",
          "id": "48"
        }
      ]
    },
    "Generator": {
      "items": [
        {
          "name": "creation",
          "description": "There are many ways to create a generator",
          "path": "generator/creation",
          "level": "TBD",
          "requiresKnowledgeFrom": [
            7,
            8,
            16,
            22
          ],
          "groupName": "Generator",
          "id": "49"
        },
        {
          "name": "iterator",
          "description": "Generators return iterable objects",
          "path": "generator/iterator",
          "level": "TBD",
          "requiresKnowledgeFrom": [
            49
          ],
          "groupName": "Generator",
          "id": "50"
        },
        {
          "name": "yield expressions",
          "description": "The yield keyword is used to pause and resume a generator function",
          "path": "generator/yield",
          "level": "TBD",
          "requiresKnowledgeFrom": [
            7,
            49,
            50
          ],
          "groupName": "Generator",
          "id": "51"
        },
        {
          "name": "send value to a generator",
          "description": "By calling next() with a parameter, you can pass a value to a generator.",
          "path": "generator/send-value",
          "level": "ADVANCED",
          "requiresKnowledgeFrom": [
            7,
            49,
            50,
            51
          ],
          "groupName": "Generator",
          "id": "52"
        },
        {
          "name": "send function to a generator",
          "description": "By calling next() with a function, you can pass it to the generator.",
          "path": "generator/send-function",
          "level": "EXPERT",
          "requiresKnowledgeFrom": [
            7,
            49,
            50,
            51,
            52
          ],
          "groupName": "Generator",
          "id": "56"
        }
      ]
    },
    "Object API": {
      "items": [
        {
          "name": "`Object.is()`",
          "description": "`Object.is()` compares if two values are the same.",
          "path": "object-api/is",
          "level": "BEGINNER",
          "requiresKnowledgeFrom": [
            8,
            7,
            44
          ],
          "groupName": "Object API",
          "id": "54"
        }
      ]
    },
    "Number": {
      "items": [
        {
          "name": "`Number.isInteger()`",
          "description": "`Number.isInteger()` determines if a value is an integer.",
          "path": "number-api/isinteger",
          "level": "BEGINNER",
          "requiresKnowledgeFrom": [],
          "groupName": "Number",
          "id": "55"
        }
      ]
    },
    "Default parameters": {
      "items": [
        {
          "name": "Basics",
          "description": "Default parameters make function parameters more flexible.",
          "path": "default-parameters/basics",
          "level": "BEGINNER",
          "requiresKnowledgeFrom": [
            7,
            5,
            1
          ],
          "groupName": "Default parameters",
          "id": "57"
        }
      ]
    },
    "Reflect API": {
      "items": [
        {
          "name": "Basics",
          "description": "",
          "path": "reflect/basics",
          "level": "BEGINNER",
          "requiresKnowledgeFrom": [
            7,
            22,
            25,
            28
          ],
          "groupName": "Reflect API",
          "id": "58"
        },
        {
          "name": "`Reflect.apply()`",
          "description": "Calls a target function with given scope and arguments.",
          "path": "reflect/apply",
          "level": "INTERMEDIATE",
          "requiresKnowledgeFrom": [
            7,
            8,
            22,
            5,
            31
          ],
          "groupName": "Reflect API",
          "id": "59"
        },
        {
          "name": "`Reflect.getPrototypeOf()`",
          "description": "It returns the prototype of the given object.",
          "path": "reflect/getprototypeof",
          "level": "INTERMEDIATE",
          "requiresKnowledgeFrom": [
            7,
            8,
            22,
            5
          ],
          "groupName": "Reflect API",
          "id": "60"
        }
      ]
    },
    "Modules": {
      "items": [
        {
          "name": "`import` statement",
          "description": "Use `import` to import functions that have been exported somewhere else.",
          "path": "modules/import",
          "level": "BEGINNER",
          "requiresKnowledgeFrom": [],
          "groupName": "Modules",
          "id": "61"
        }
      ]
    }
  }
}